#!/usr/bin/perl -wT
# 
# started by Matija Nalis <mnalis-git@voyager.hr> 2019-07-01 GPLv3+
#
# parses standard mysqldump one-file-dump, and reimports it in parallel 
# to speed up restoring database.
#

use strict;
use autodie;

my $OUTPUT_DIR = './tmp';

# no user serviceable parts below
my $MARKER_ONLYONCE	= '-- PRESTORE_ONLY_ONCE: ';
my $RE_HEAD_ONLYONCE	= qr'^(DROP DATABASE|CREATE DATABASE|CHANGE MASTER)'i;
my $RE_NEW_TABLE	= qr'^-- Table structure'i;
my $RE_TAIL_DETECT	= qr{
				^--\ Dump\ completed |
				^--\ Final\ view\ structure |	# do not parallelize views put them in the tail, since all tables must exist before we try to create them
				SET\h.*=\h*\@OLD
			    }ix;


my $cur_fd = undef;
my $file_seq = 0;

# closes previous, and opens a new file
sub open_file($) {
	my ($basename) = @_;
	if ($file_seq < 0) { return }			# we are already in .tail, do not truncate it
	close $cur_fd if defined $cur_fd;
	my $new_fname = $OUTPUT_DIR . '/mysql-prestore.' . $basename;
	if (-e $new_fname) { die "$0: ERROR: refuse to clobber: $new_fname" }
	open $cur_fd, '>', $new_fname;
	if ($basename eq 'tail') { $file_seq = -1 }	# once in ".tail", we won't be opening any new files ever again.
}

# opens next file for next table
sub open_next() {
	my $base = sprintf ('table%.8d', $file_seq++);
	open_file($base);
}

open_file('head');

while (<STDIN>) {
	/$RE_NEW_TABLE/ 	and open_next();
	/$RE_TAIL_DETECT/	and open_file('tail');
	/$RE_HEAD_ONLYONCE/	and print $cur_fd $MARKER_ONLYONCE ;
	print $cur_fd $_;
}

close $cur_fd;
